generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Database URL from .env file
}

enum PaymentStatus {
  requested
  paid
  rejected
}

model Lecture {
  id         String @id @default(uuid())
  title       String
  videoUrl    String
  public_id   String
  freePreview Boolean
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Course {
  id              String           @id @default(uuid())
  instructorId     String
  instructorName   String
  date             DateTime         @default(now())
  title            String
  category         String
  level            String
  primaryLanguage  String
  subtitle         String?
  description      String
  image            String?
  welcomeMessage   String?
  pricing          String
  objectives       String
  isPublished      Boolean          @default(false)
  curriculum       Lecture[]
  students         CourseEnrollment[]
  payments         Payment[]
}

model User {
  id              String              @id  @default(uuid())
  firstName       String
  lastName        String
  username        String              @unique
  email           String              @unique
  password        String
  role            String              @default("student") // 'student', 'instructor', etc.
  coursesEnrolled CourseEnrollment[]
  payments        Payment[]
}

model CourseEnrollment {
  courseId String
  userId   String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([courseId, userId])
}

model Payment {
  id         String        @id @default(uuid())
  userId     String
  courseId   String
  amount     String
  status     PaymentStatus @default(requested)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id])
  course     Course        @relation(fields: [courseId], references: [id])
}
